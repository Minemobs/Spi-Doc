{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bienvenue sur SpiDocs. Pr\u00e9requis BuildTools 1.17.1 ou plus OpenJDK 16 Eclipse ou Intellij C'est bon vous avez tout ? Bon on peut commencer. G\u00e9n\u00e9rer les sources de CraftBukkit et Spigot Apr\u00e8s avoir t\u00e9l\u00e9charg\u00e9 BuildTools il faudra d\u00e9placer ce fichier dans un dossier sp\u00e9cifique car BuildTools va g\u00e9n\u00e9rer \u00e9norm\u00e9ment de fichiers. Maintenant vous devrez executer cette commande: java -jar BuildTools.jar --rev 1.17.1 Et voil\u00e0 vous avez les sources de CraftBukkit Cr\u00e9er le plugin Cr\u00e9ez un projet gradle et importez Spigot Dans le fichier build.gradle plugins { id 'java' } group 'fr.votrenom' version '1.0-SNAPSHOT' repositories { mavenCentral () mavenLocal () } dependencies { compileOnly ( 'org.spigotmc:spigot:1.17.1-R0.1-SNAPSHOT' ) testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0' testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0' } test { useJUnitPlatform () } Si jamais gradle vous donnes cette erreur General error during semantic analysis: Unsupported class file major version 60 allez dans le dossier gradle puis ouvrez gradle-wrapper.yml Et changez la ligne contant distributionURL= par distributionUrl=https\\://services.gradle.org/distributions/gradle-7.2-bin.zip","title":"Accueil"},{"location":"#bienvenue-sur-spidocs","text":"","title":"Bienvenue sur SpiDocs."},{"location":"#prerequis","text":"BuildTools 1.17.1 ou plus OpenJDK 16 Eclipse ou Intellij C'est bon vous avez tout ? Bon on peut commencer.","title":"Pr\u00e9requis"},{"location":"#generer-les-sources-de-craftbukkit-et-spigot","text":"Apr\u00e8s avoir t\u00e9l\u00e9charg\u00e9 BuildTools il faudra d\u00e9placer ce fichier dans un dossier sp\u00e9cifique car BuildTools va g\u00e9n\u00e9rer \u00e9norm\u00e9ment de fichiers. Maintenant vous devrez executer cette commande: java -jar BuildTools.jar --rev 1.17.1 Et voil\u00e0 vous avez les sources de CraftBukkit","title":"G\u00e9n\u00e9rer les sources de CraftBukkit et Spigot"},{"location":"#creer-le-plugin","text":"Cr\u00e9ez un projet gradle et importez Spigot Dans le fichier build.gradle plugins { id 'java' } group 'fr.votrenom' version '1.0-SNAPSHOT' repositories { mavenCentral () mavenLocal () } dependencies { compileOnly ( 'org.spigotmc:spigot:1.17.1-R0.1-SNAPSHOT' ) testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0' testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0' } test { useJUnitPlatform () } Si jamais gradle vous donnes cette erreur General error during semantic analysis: Unsupported class file major version 60 allez dans le dossier gradle puis ouvrez gradle-wrapper.yml Et changez la ligne contant distributionURL= par distributionUrl=https\\://services.gradle.org/distributions/gradle-7.2-bin.zip","title":"Cr\u00e9er le plugin"},{"location":"customblock/","text":"Explications Pour faire le bloc nous allons utiliser un spawner qui contiendra un armor stand. Ce porte armure aura sur sa t\u00eate votre bloc custom sous forme d'item. Le model de l'item devra avoir une taille sup\u00e9rieur ou \u00e9gale \u00e0 la taille du model du spawner. \u26a0\ufe0f \u00c0 noter que quelque soit la taille de votre model, la hitbox du bloc sera toujours celle du spawner ! Cr\u00e9ation du texture pack: Pour faire cette page je me suis aid\u00e9 de l'article d'Hardel sur les blocs personnalis\u00e9s Cr\u00e9ez un dossier et mettez y dedans 3 fichiers: Une image qui va \u00eatre l'ic\u00f4ne de votre pack de texture. Ce fichier devra s'appeler pack.png . Un dossier assets qui contiendra toutes les textures et models de vos blocs personnalis\u00e9s. Dans ce dossier cr\u00e9ez un sous-dossier minecraft et un autre sous-dossier ayant le nom de votre plugin. Un fichier pack.mcmeta qui contiendra les informations \u00e0 propos de votre texture pack comme la description ou le format. Dans le fichier pack.mcmeta mettez ceci: { \"pack\" : { \"pack_format\" : 7 , \"description\" : \"Un texture pack pour les blocks custom\" } } Cr\u00e9ation du CustomModelData Pour ceux qui ne savent pas ce qu'est un custom model data je vous redirige vers l'article d'Hardel et la vid\u00e9o de Silvator . Dans votre dossier minecraft cr\u00e9ez y un r\u00e9pertoire models et dans ce dossier faites un sous-dossier nomm\u00e9 item . \u00c0 l'int\u00e9rieur de ce dossier cr\u00e9ez un ficher lime_glazed_terracotta.json et mettez ce code : { \"parent\" : \"block/lime_glazed_terracotta\" , \"overrides\" : [ { \"predicate\" : { \"custom_model_data\" : 1 }, \"model\" : \"nomDeVotrePlugin:ores/ruby_ore\" }, ] } Replacez nomDeVotrePlugin par le nom de votre plugin. Cr\u00e9ation du model 3D Dans le dossier de votre plugin cr\u00e9ez deux dossiers, textures et models . Le dossier textures contiendra les textures de vos blocs. Le dossier models contiendra des fichiers qui s'occuperont du model 3D de l'item. Cr\u00e9ation du bloc dans le code Dans votre projet gradle cr\u00e9ez un arborescence de fichiers comme celle-ci : Dans le dossier java cr\u00e9ez un vos packages et votre classe main. Dans mon cas je vais appeler mes packages fr.minemobs.customblocktuto et ma classe Main CustomBlockTuto . Dans le dossier resources cr\u00e9ez un ficher plugin.yml . Dans ce fichier ajoutez les lignes suivantes: name : CustomBlockTuto main : fr.votre.package.VotreClasseMain version : 1.0 description : Un tutoriel pour ajouter des blocs personalis\u00e9s dans Minecraft avec Spigot api-version : 1.17 author : VotrePseudo Remplacez CustomBlockTuto par le nom de votre plugin, fr.votrepackage.VotreClasseMain par votre classe Main, VotrePseudo par votre pseudo. Et changez la description.","title":"Blocs Personnalis\u00e9s"},{"location":"customblock/#explications","text":"Pour faire le bloc nous allons utiliser un spawner qui contiendra un armor stand. Ce porte armure aura sur sa t\u00eate votre bloc custom sous forme d'item. Le model de l'item devra avoir une taille sup\u00e9rieur ou \u00e9gale \u00e0 la taille du model du spawner. \u26a0\ufe0f \u00c0 noter que quelque soit la taille de votre model, la hitbox du bloc sera toujours celle du spawner !","title":"Explications"},{"location":"customblock/#creation-du-texture-pack","text":"Pour faire cette page je me suis aid\u00e9 de l'article d'Hardel sur les blocs personnalis\u00e9s Cr\u00e9ez un dossier et mettez y dedans 3 fichiers: Une image qui va \u00eatre l'ic\u00f4ne de votre pack de texture. Ce fichier devra s'appeler pack.png . Un dossier assets qui contiendra toutes les textures et models de vos blocs personnalis\u00e9s. Dans ce dossier cr\u00e9ez un sous-dossier minecraft et un autre sous-dossier ayant le nom de votre plugin. Un fichier pack.mcmeta qui contiendra les informations \u00e0 propos de votre texture pack comme la description ou le format. Dans le fichier pack.mcmeta mettez ceci: { \"pack\" : { \"pack_format\" : 7 , \"description\" : \"Un texture pack pour les blocks custom\" } }","title":"Cr\u00e9ation du texture pack:"},{"location":"customblock/#creation-du-custommodeldata","text":"Pour ceux qui ne savent pas ce qu'est un custom model data je vous redirige vers l'article d'Hardel et la vid\u00e9o de Silvator . Dans votre dossier minecraft cr\u00e9ez y un r\u00e9pertoire models et dans ce dossier faites un sous-dossier nomm\u00e9 item . \u00c0 l'int\u00e9rieur de ce dossier cr\u00e9ez un ficher lime_glazed_terracotta.json et mettez ce code : { \"parent\" : \"block/lime_glazed_terracotta\" , \"overrides\" : [ { \"predicate\" : { \"custom_model_data\" : 1 }, \"model\" : \"nomDeVotrePlugin:ores/ruby_ore\" }, ] } Replacez nomDeVotrePlugin par le nom de votre plugin.","title":"Cr\u00e9ation du CustomModelData"},{"location":"customblock/#creation-du-model-3d","text":"Dans le dossier de votre plugin cr\u00e9ez deux dossiers, textures et models . Le dossier textures contiendra les textures de vos blocs. Le dossier models contiendra des fichiers qui s'occuperont du model 3D de l'item.","title":"Cr\u00e9ation du model 3D"},{"location":"customblock/#creation-du-bloc-dans-le-code","text":"Dans votre projet gradle cr\u00e9ez un arborescence de fichiers comme celle-ci : Dans le dossier java cr\u00e9ez un vos packages et votre classe main. Dans mon cas je vais appeler mes packages fr.minemobs.customblocktuto et ma classe Main CustomBlockTuto . Dans le dossier resources cr\u00e9ez un ficher plugin.yml . Dans ce fichier ajoutez les lignes suivantes: name : CustomBlockTuto main : fr.votre.package.VotreClasseMain version : 1.0 description : Un tutoriel pour ajouter des blocs personalis\u00e9s dans Minecraft avec Spigot api-version : 1.17 author : VotrePseudo Remplacez CustomBlockTuto par le nom de votre plugin, fr.votrepackage.VotreClasseMain par votre classe Main, VotrePseudo par votre pseudo. Et changez la description.","title":"Cr\u00e9ation du bloc dans le code"}]}